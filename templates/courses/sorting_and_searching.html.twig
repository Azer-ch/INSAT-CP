{% extends 'headerBase.html.twig' %}

{% block stylesheets %}
    {{ parent() }}
{% endblock %}

{% block body %}
<style>
    body {
        background-color: #c6cfd7;
    }

    .simulation {
        margin: 0;
        background-color: #eee;
        display: flex;
        /* justify-content: space-around; */
        transition: all 1s ease;
    }

    .block {
        border: 2px solid black;
        transition: margin 1s ease, background-color 0.7s ease;
        position: absolute;
        border-radius: 7px;
        display: flex;
        justify-content: center;
        align-items: center;
        background-color: black;
        color: white;
        font-size: 5vw;
        margin-top: 5vw;


    }

    .exp {
        margin-top: 21vw;
        display: flex;
        justify-content: space-evenly;
        align-items: center;

    }

    .exp p {
        margin: 0;
    }

    .slidecontainer {
        width: 100%;
        /* Width of the outside container */
    }

    /* The slider itself */
    .slider {
        appearance: none;
        width: 100%;
        /* Full-width */
        height: 25px;
        /* Specified height */
        background: #333;
        /* Grey background */
        outline: none;
        /* Remove outline */
        opacity: 0.7;
        /* Set transparency (for mouse-over effects on hover) */
        transition: opacity .2s;
        border-radius: 7px;
    }

    /* Mouse-over effects */
    .slider:hover {
        opacity: 1;
        /* Fully shown on mouse-over */
    }

    .nope {
        display: none !important;
    }

    /* The slider handle (use -webkit- (Chrome, Opera, Safari, Edge) and -moz- (Firefox) to override default look) */
    .slider::-webkit-slider-thumb {
        -webkit-appearance: none;
        /* Override default look */
        appearance: none;
        width: 25px;
        /* Set a specific slider handle width */
        height: 25px;
        /* Slider handle height */
        background: #0069d9;
        /* Green background */
        cursor: pointer;
        /* Cursor on hover */
    }

    .slider::-moz-range-thumb {
        width: 25px;
        /* Set a specific slider handle width */
        height: 25px;
        /* Slider handle height */
        background: #0069d9;
        /* Green background */
        cursor: pointer;
        /* Cursor on hover */
    }

    .arrow {
        /* background-color:purple; */
        border: solid purple;
        border-width: 0 1vw 1vw 0;
        display: inline-block;
        padding: 1vw;
        position: absolute;
        transition: 1s all ease;
    }


    .up {
        transform: rotate(45deg);
        -webkit-transform: rotate(45deg);
    }

    #a3 {
        border-color: darkred;

    }

    #a4 {
        border-color: darkcyan;
    }
</style>
<div class="jumbotron mt-5">
    <h1 class="display-4">bubble sort</h1>

    <p class="lead">for an array a of length n bubble sort works by swapping every adjacent elements if the i-th element is bigger than the i+1-th element and repeating this process n-1 times</br>
        for the worst case where the array is reverse sorted bubble sort performs n+n-1+n-2+...+1=O(n^2) (arithmetic sum) operations. and even in the average case it has a complexity of O(n^2)
    </p>
    <hr class="my-4">
    <p>code</p>
</div>
<div class="simulation">
    <div class="block" id="block0">0</div>
    <div class="block" id="block1">1</div>
    <div class="block" id="block2">2</div>
    <div class="block" id="block3">3</div>
    <div class="block" id="block4">4</div>
    <div class="block" id="block5">5</div>
    <div class="block nope" id="block6">6</div>
    <div class="block nope" id="block7">7</div>
    <div class="block nope" id="block8">8</div>
    <div class="block nope" id="block9">9</div>
    <div class="block nope" id="block10">10</div>
    <div class="block nope" id="block11">11</div>
</div>
<div class="exp">
    <button type="button" class="btn-lg btn-primary" id="randomize">randomize</button>
    <button type="button" class="btn-lg btn-danger" id="stop">stop</button>
    <button type="button" class="btn-lg btn-primary" id="sort">sort </button>
    <!-- <button type="button" class="btn-lg btn-primary" id="add">add element</button> -->
    <div>
        <div class="slidecontainer">
            <input type="range" min="5" max="12" value="6" step="1" class="slider" id="myRange">
        </div>
        <p>number of elements:
            <span id="range-val">6</span>
        </p>
    </div>
</div>
<script>
    let blocks = [];
    let block_width;
    let n_blocks = 6;
    let a7mer = "#b51919";
    let black = "black";
    let green = "green";
    let stop = false;

    function sleep(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    function getRandomInt(max) {
        return Math.floor(Math.random() * max);
    }
    let swapId = (id1, id2) => {
        let x = blocks[arr[id1]].style.marginLeft;
        blocks[arr[id1]].style.marginLeft = blocks[arr[id2]].style.marginLeft;
        blocks[arr[id2]].style.marginLeft = x;
    };
    let swap = (a, b, ar) => {
        let x = ar[a];
        ar[a] = ar[b];
        ar[b] = x;
    };

    let lawen = (id, col) => {
        blocks[arr[id]].style.backgroundColor = col;


    };
    let blacken = () => {
        for (let i = 0; i < n_blocks; i++) {
            lawen(i, black);
        }
    };
    var arr = [];

    let sort = async function(inputArr) {
        stop = false;
        badd.setAttribute("disabled", "disabled");
        bsort.setAttribute("disabled", "disabled");
        brandom.setAttribute("disabled", "disabled");
        let len = n_blocks - 1;
        let last = len;
        let swapped;
        do {
            swapped = false;
            for (let i = 0; i < last; i++) {



                lawen(i, a7mer);
                lawen(i + 1, a7mer);
                if (stop) {
                    stop = false;
                    badd.removeAttribute("disabled", "disabled");
                    bsort.removeAttribute("disabled", "disabled");
                    brandom.removeAttribute("disabled", "disabled");
                    return;
                }
                if (inputArr[i] > inputArr[i + 1]) {
                    swap(i, i + 1, inputArr);
                    swapId(i, i + 1);
                    swapped = true;
                }
                await sleep(700);
                lawen(i, black);
                lawen(i + 1, black);
                if (stop) {
                    stop = false;
                    badd.removeAttribute("disabled", "disabled");
                    bsort.removeAttribute("disabled", "disabled");
                    brandom.removeAttribute("disabled", "disabled");

                    return;
                }

            }
            lawen(last, green);
            last--;
        } while (swapped);
        for (let i = 0; i < len + 1; i++) {
            lawen(i, green);
        }
        badd.removeAttribute("disabled", "disabled");
        bsort.removeAttribute("disabled", "disabled");
        brandom.removeAttribute("disabled", "disabled");

        return inputArr;
    };

    let init = () => {

        block_width = 75.0 / n_blocks;
        for (let i = 0; i < 12; i++) {
            arr[i] = i;
            blocks[i] = document.getElementById("block" + i);
            blocks[i].style.width = block_width + "vw";
            blocks[i].style.height = block_width + "vw";
            let sep = (25.0) / (n_blocks + 1);
            blocks[i].style.marginLeft = ((i + 1) * sep + i * block_width) + "vw";
        }




    };
    let randomize = () => {
        let a, b;
        for (let i = 0; i < n_blocks; i++) {
            a = getRandomInt(n_blocks);
            b = getRandomInt(n_blocks);
            swapId(a, b);
            swap(a, b, arr);
        }
        blacken();

    };
    let check = () => {
        blacken();

        let val = badd.value - 0;
        document.getElementById("range-val").innerHTML = val;


        if (val < n_blocks) {
            // console.log(n_blocks);
            for (let i = n_blocks; i > val; i--) {
                blocks[i - 1].classList.add("nope");
            }

            n_blocks = val - 0;
            init();
        }
        if (val > n_blocks) {
            for (let i = n_blocks; i < val; i++) {
                blocks[i].classList.remove("nope");
            }
            n_blocks = val - 0;
            init();

        }



    };
    var brandom = document.getElementById("randomize");
    brandom.addEventListener("click", randomize);

    var bsort = document.getElementById("sort");
    bsort.addEventListener("click", () => sort(arr));

    var badd = document.getElementById("myRange");
    badd.addEventListener("change", check);

    var bstop = document.getElementById("stop");
    bstop.addEventListener("click", () => {
        stop = true;
    });


    init();
    randomize();
</script>

{% endblock %}