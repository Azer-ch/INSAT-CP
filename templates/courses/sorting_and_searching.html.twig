{% extends 'headerBase.html.twig' %}

{% block stylesheets %}
    {{ parent() }}
    {{ encore_entry_link_tags('sorting') }}
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.0.1/styles/github-dark-dimmed.min.css">
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    {{ encore_entry_script_tags('sortingjs') }}
{#    <script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.0.1/highlight.min.js"></script>#}
{% endblock %}
{% block body %}
    <div class="jumbotron m-5">
        <h1 class="display-4 text-break">bubble sort</h1>

        <p class="lead">
            Bubble Sort is the simplest sorting algorithm that works by repeatedly swapping the adjacent elements if they are in wrong order.
            <br>Example:
            <br>First Pass:
            <br>( 5 1 4 2 8 ) –> ( 1 5 4 2 8 ), Here, algorithm compares the first two elements, and swaps since 5 > 1.
            <br>( 1 5 4 2 8 ) –>  ( 1 4 5 2 8 ), Swap since 5 > 4
            <br>( 1 4 5 2 8 ) –>  ( 1 4 2 5 8 ), Swap since 5 > 2
            <br>( 1 4 2 5 8 ) –> ( 1 4 2 5 8 ), Now, since these elements are already in order (8 > 5), algorithm does not swap them.
            <br>Second Pass:
            <br>( 1 4 2 5 8 ) –> ( 1 4 2 5 8 )
            <br>( 1 4 2 5 8 ) –> ( 1 2 4 5 8 ), Swap since 4 > 2
            <br>( 1 2 4 5 8 ) –> ( 1 2 4 5 8 )
            <br>( 1 2 4 5 8 ) –>  ( 1 2 4 5 8 )
            <br>Now, the array is already sorted, but our algorithm does not know if it is completed. The algorithm needs one whole pass without any swap to know it is sorted.
            <br>Third Pass:
            <br>( 1 2 4 5 8 ) –> ( 1 2 4 5 8 )
            <br>( 1 2 4 5 8 ) –> ( 1 2 4 5 8 )
            <br>( 1 2 4 5 8 ) –> ( 1 2 4 5 8 )
            <br>( 1 2 4 5 8 ) –> ( 1 2 4 5 8 )
        </p>
        <hr class="my-4">
        <pre><code class="language-cpp">{{ code }}</code></pre>
    </div>
    <div class="simulation">
        <div class="block" id="qblock0">0</div>
        <div class="block" id="qblock1">1</div>
        <div class="block" id="qblock2">2</div>
        <div class="block" id="qblock3">3</div>
        <div class="block" id="qblock4">4</div>
        <div class="block" id="qblock5">5</div>
        <div class="block nope" id="qblock6">6</div>
        <div class="block nope" id="qblock7">7</div>
        <div class="block nope" id="qblock8">8</div>
        <div class="block nope" id="qblock9">9</div>
        <div class="block nope" id="qblock10">10</div>
        <div class="block nope" id="qblock11">11</div>
    </div>
    <div class="exp">
        <button type="button" class="btn-lg btn-primary" id="qrandomize">randomize</button>
        <button type="button" class="btn-lg btn-danger"  id="qstop">stop</button>
        <button type="button" class="btn-lg btn-primary" id="qsort">sort</button>
        <!-- <button type="button" class="btn-lg btn-primary" id="add">add element</button> -->
        <div>
            <div class="slidecontainer">
                <input type="range" min="5" max="12" value="6" step="1" class="slider" id="qmyRange">
            </div>
            <p>number of elements:
                <span id="qrange-val">6</span>
            </p>
        </div>
    </div>
    <div class="jumbotron m-5">
        <h1 class="display-4">quicksort</h1>

        <p class="lead">
            Quick Sort Pivot Algorithm
            <br>Based on our understanding of partitioning in quick sort, we will now try to write an algorithm for it, which is as follows.

            <br>Step 1 − Choose the highest index value has pivot
            <br>Step 2 − Take two variables to point left and right of the list excluding pivot
            <br>Step 3 − left points to the low index
            <br>Step 4 − right points to the high
            <br>Step 5 − while value at left is less than pivot move right
            <br>Step 6 − while value at right is greater than pivot move left
            <br>Step 7 − if both step 5 and step 6 does not match swap left and right
            <br>Step 8 − if left ≥ right, the point where they met is new pivot
        </p>
        <hr class="my-4">
        <pre><code class="language-cpp">{{ code2 }}</code></pre>
    </div>
    <div class="indicator">
        <i id="a4" class="nope arrow up "></i>
        <i id="a3" class="nope arrow up "></i>
        <i id="a1" class="arrow up"></i>
        <i id="a2" class="arrow up"></i>
    </div>
    <div class="simulation">
        <div class="block" id="block0">0</div>
        <div class="block" id="block1">1</div>
        <div class="block" id="block2">2</div>
        <div class="block" id="block3">3</div>
        <div class="block" id="block4">4</div>
        <div class="block" id="block5">5</div>
        <div class="block nope" id="block6">6</div>
        <div class="block nope" id="block7">7</div>
        <div class="block nope" id="block8">8</div>
        <div class="block nope" id="block9">9</div>
        <div class="block nope" id="block10">10</div>
        <div class="block nope" id="block11">11</div>
    </div>

    <div class="exp">
        <button type="button" class="btn-lg btn-primary" id="randomize">randomize</button>
        <button type="button" class="btn-lg btn-danger" id="stop">stop</button>
        <button type="button" class="btn-lg btn-primary" id="sort">sort </button>
        <!-- <button type="button" class="btn-lg btn-primary" id="add">add element</button> -->
        <div>
            <div class="slidecontainer">
                <input type="range" min="5" max="12" value="6" step="1" class="slider" id="myRange">
            </div>
            <p>number of elements:
                <span id="range-val">6</span>
            </p>
        </div>
    </div>

{% endblock %}